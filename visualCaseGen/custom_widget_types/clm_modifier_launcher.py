import os
import logging
from ipywidgets import VBox, Button, Output
from pathlib import Path
import subprocess
import time

from ProConPy.out_handler import handler as owh
from ProConPy.stage import Stage
from ProConPy.config_var import cvars
from ProConPy.dialog import alert_warning


class ClmModifierLauncher(VBox):
    """A base class for CLM input modifier tool launchers, namely MeshMaskModifierLauncher
    and FsurdatModifierLauncher."""

    def __init__(self, tool_name, srcroot, required_vars, status_var, **kwargs):
        """Initialize the widget.

        Parameters
        ----------
        tool_name : str
            The name of the tool to be launched.
        srcroot : str
            The path to the CESM source root.
        required_vars : list
            A list of ConfigVar instances that must be set before running the tool.
        status_var : ConfigVar
            A ConfigVar instance to store the status of the tool.
        **kwargs
            Additional keyword arguments to pass to the VBox
        """

        super().__init__(**kwargs)

        # tool name must be a valid filename:
        assert not any(c in tool_name for c in r'\/:*?"<>| '), "Invalid tool name"

        self._tool_name = tool_name
        self._srcroot = srcroot
        self._required_vars = required_vars
        self._status_var = status_var

        # observe changes in the required variables
        for var in self._required_vars:
            var._widget.observe(
                self._on_required_var_change, names="_property_lock", type="change"
            )

        # Launch button
        self._btn_launch = Button(
            description=f"Run {self._tool_name}",
            button_style="success",
            layout={"width": "max-content", "margin": "10px", "align_self": "center"},
        )
        self._btn_launch.on_click(self._on_launch_clicked)

        self._out = Output()

        self.children = [
            self._btn_launch,
            self._out,
        ]

    @property
    def disabled(self):
        return super().disabled

    @disabled.setter
    def disabled(self, value):
        self._out.clear_output()
        self._btn_launch.disabled = value

    def _on_required_var_change(self, change):
        self._status_var.value = None
        self._out.clear_output()

    @owh.out.capture()
    def _on_launch_clicked(self, b):

        remaining_vars = [var.name for var in self._required_vars if var.value is None]

        if len(remaining_vars) > 0:
            alert_warning(
                f"The following variables must be set before running {self._tool_name}: {remaining_vars}"
            )
            return

        # clear the output widget and reset the status variable
        self._out.clear_output()
        self._status_var.value = None

        base_lnd_grid = cvars["CUSTOM_LND_GRID"].value
        custom_grid_path = Path(cvars["CUSTOM_GRID_PATH"].value)

        # if custom grid path wasn't created, create it
        if not custom_grid_path.exists():
            custom_grid_path.mkdir()

        # if lnd subdir wasn't created, create it
        lnd_dir = custom_grid_path / "lnd"
        if not lnd_dir.exists():
            lnd_dir.mkdir()

        # write the mesh mask modifier config file
        config_file_path = lnd_dir / f"{self._tool_name}.cfg"

        # file name to be generated by the mesh mask modifier tool
        modified_file_path = lnd_dir / f"{base_lnd_grid}_{self._tool_name}.nc"

        self._write_config(config_file_path, modified_file_path)
        success = self._run_tool(config_file_path, modified_file_path)

        if success:
            self._status_var.value = "success"

    def _write_config(self, config_file_path, modified_file_path):
        raise NotImplementedError  # must be implemented by subclasses

    def _run_tool(self, config_file_path, modified_file_path):

        # if an old file exists, remove it
        if modified_file_path.exists():
            modified_file_path.unlink()

        exe_path = os.path.join(
            self._srcroot,
            "components",
            "clm",
            "tools",
            "modify_input_files",
            self._tool_name,
        )

        if not os.path.exists(exe_path):
            raise RuntimeError(f"Cannot find {self._tool_name} tool!")

        cmd = f"{exe_path} {config_file_path}"

        proc = subprocess.Popen(
            cmd,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
        )

        success = False

        with self._out:
            print(
                f"Running {self._tool_name}. This may take a while. visualCaseGen will "
                f"be unresponsive until the process is complete, and will automatically "
                f"proceed to the next stage when done.\n"
            )
            while proc.poll() is None:
                time.sleep(1)
                print(".", end="")

            stdout, stderr = proc.communicate()

            print(f"\nDone running {self._tool_name}.")
            if stdout:
                print(stdout)
            if stderr:
                if os.path.exists(modified_file_path):
                    print(
                        f"The {self._tool_name} tool has generated the file  {modified_file_path}"
                        "but the following warnings were issued:"
                    )
                    success = True
                else:
                    print(
                        f"The {self._tool_name} tool has failed to generate the file."
                    )
                print(stderr)
            elif os.path.exists(modified_file_path):
                print(
                    f"The {self._tool_name} tool has generated the file {modified_file_path}"
                )
                success = True

        return success


class MeshMaskModifierLauncher(ClmModifierLauncher):
    "A widget to execute the mesh mask modifier tool that comes with CESM."

    def __init__(self, srcroot, **kwargs):
        """Initialize the MeshMaskModifierLauncher widget.

        Parameters
        ----------
        srcroot : str
            The path to the CESM source root.
        **kwargs
            Additional keyword arguments to pass to the VBox
        """

        super().__init__(
            tool_name="mesh_mask_modifier",
            srcroot=srcroot,
            required_vars=[
                cvars["INPUT_MASK_MESH"],
                cvars["LAND_MASK"],
                cvars["LAT_VAR_NAME"],
                cvars["LON_VAR_NAME"],
                cvars["LAT_DIM_NAME"],
                cvars["LON_DIM_NAME"],
            ],
            status_var=cvars["MESH_MASK_MOD_STATUS"],
            **kwargs,
        )

    def _write_config(self, config_file_path, modified_file_path):

        with config_file_path.open("w") as f:
            f.write(
                f"[modify_input]\n"
                f'mesh_mask_in = {cvars["INPUT_MASK_MESH"].value}\n'
                f"mesh_mask_out = {modified_file_path}\n"
                f'landmask_file = {cvars["LAND_MASK"].value}\n'
                f'lat_dimname = {cvars["LAT_DIM_NAME"].value}\n'
                f'lon_dimname = {cvars["LON_DIM_NAME"].value}\n'
                f'lat_varname = {cvars["LAT_VAR_NAME"].value}\n'
                f'lon_varname = {cvars["LON_VAR_NAME"].value}\n'
            )


class FsurdatModifierLauncher(ClmModifierLauncher):
    "A widget to execute the surface data modifier tool that comes with CESM."

    def __init__(self, srcroot, **kwargs):
        """Initialize the FsurdatModifierLauncher widget.

        Parameters
        ----------
        srcroot : str
            The path to the CESM source root.
        **kwargs
            Additional keyword arguments to pass to the VBox
        """

        super().__init__(
            tool_name="fsurdat_modifier",
            srcroot=srcroot,
            required_vars=[
                cvars["INPUT_FSURDAT"],
                cvars["FSURDAT_AREA_SPEC"],
                cvars["FSURDAT_IDEALIZED"],
                cvars["LND_DOM_PFT"],
                cvars["LND_SOIL_COLOR"],
                cvars["LND_STD_ELEV"],
                cvars["LND_MAX_SAT_AREA"],
                cvars["LND_INCLUDE_NONVEG"],
            ],
            status_var=cvars["FSURDAT_MOD_STATUS"],
            **kwargs,
        )

    def _write_config(self, config_file_path, modified_file_path):

        set_val = lambda val: str(val) if val not in [None, ""] else "UNSET"

        with config_file_path.open("w") as f:
            f.write(
                f"[modify_fsurdat_basic_options]\n"
                f'fsurdat_in = {cvars["INPUT_FSURDAT"].value}\n'
                f"fsurdat_out = {modified_file_path}\n"
                f'idealized = {cvars["FSURDAT_IDEALIZED"].value}\n'
                f"process_subgrid_section = False\n"
                f"process_var_list_section = False\n"
            )

            if cvars["FSURDAT_AREA_SPEC"].value.startswith("coords:"):
                coords = cvars["FSURDAT_AREA_SPEC"].value[7:].split(",")
                f.write(
                    f"lnd_lat_1 = {coords[0]}\n"
                    f"lnd_lat_2 = {coords[1]}\n"
                    f"lnd_lon_1 = {coords[2]}\n"
                    f"lnd_lon_2 = {coords[3]}\n"
                    f'landmask_file = UNSET\n'
                )
            elif cvars["FSURDAT_AREA_SPEC"].value.startswith("mask_file:"):
                f.write(
                    f"lnd_lat_1 = -90.0\n"
                    f"lnd_lat_2 = 90.0\n"
                    f"lnd_lon_1 = 0.0\n"
                    f"lnd_lon_2 = 360.0\n"
                    f'landmask_file = {cvars["FSURDAT_AREA_SPEC"].value[10:]}\n'
                )
            else:
                raise ValueError("Invalid FSURDAT_AREA_SPEC value")

            lai = " ".join([str(w.value) for w in cvars["FSURDAT_MATRIX"]._widget.lai])
            sai = " ".join([str(w.value) for w in cvars["FSURDAT_MATRIX"]._widget.sai])
            hgt_top = " ".join(
                [str(w.value) for w in cvars["FSURDAT_MATRIX"]._widget.hgt_top]
            )
            hgt_bot = " ".join(
                [str(w.value) for w in cvars["FSURDAT_MATRIX"]._widget.hgt_bot]
            )

            f.write(
                f"lat_dimname = UNSET\n"
                f"lon_dimname = UNSET\n"
                f'dom_pft = {set_val(cvars["LND_DOM_PFT"].value)}\n'
                f"evenly_split_cropland = False\n"
                f"lai = {lai}\n"
                f"sai = {sai}\n"
                f"hgt_top = {hgt_top}\n"
                f"hgt_bot = {hgt_bot}\n"
                f'soil_color = {set_val(cvars["LND_SOIL_COLOR"].value)}\n'
                f'std_elev = {set_val(cvars["LND_STD_ELEV"].value)}\n'
                f'max_sat_area = {set_val(cvars["LND_MAX_SAT_AREA"].value)}\n'
                f'include_nonveg = {set_val(cvars["LND_INCLUDE_NONVEG"].value)}\n'
            )
